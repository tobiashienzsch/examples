cmake_minimum_required(VERSION 3.15)
project(cxx_simd)

option(CXX_SIMD_AVX512 "Build with AVX512 instructions. Otherwise AVX2" OFF)

if(CMAKE_PROJECT_NAME STREQUAL PROJECT_NAME)
    set(CMAKE_CXX_STANDARD 17 CACHE STRING "C++ standard to conform to")
    set(CMAKE_CXX_STANDARD_REQUIRED YES)
    set(CMAKE_CXX_EXTENSIONS NO)
    set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
    set(BUILD_SHARED_LIBS OFF)

    include(CheckCXXCompilerFlag)

    if (CXX_SIMD_AVX512)
        if (MSVC)
            CHECK_CXX_COMPILER_FLAG("/arch:AVX512" COMPILER_AVX512_SUPPORTED)
            if (COMPILER_AVX512_SUPPORTED)
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:AVX512")
            endif ()
        else ()
            CHECK_CXX_COMPILER_FLAG("-mavx512f" COMPILER_AVX512_SUPPORTED)
            if (COMPILER_AVX512_SUPPORTED)
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx512f")
            endif ()
        endif ()
    else ()
        if (MSVC)
            CHECK_CXX_COMPILER_FLAG("/arch:AVX2" COMPILER_AVX2_SUPPORTED)
            if (COMPILER_AVX2_SUPPORTED)
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:AVX2")
            endif ()
        else ()
            CHECK_CXX_COMPILER_FLAG("-mavx2" COMPILER_AVX2_SUPPORTED)
            if (COMPILER_AVX2_SUPPORTED)
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx2")
            endif ()
        endif ()
    endif (CXX_SIMD_AVX512)
endif()    

add_executable(${PROJECT_NAME})
target_sources(${PROJECT_NAME} PRIVATE simd_256.hpp main.cpp)